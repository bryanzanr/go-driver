{"version":3,"sources":["commands/unreleased/export.js"],"names":["projectDir","options","publicUrl","isURL","protocols","currentStatus","status","startedOurOwn","parent","name","startOpts","reset","clear","nonPersistent","maxWorkers","startAsync","quiet","absoluteOutputDir","resolve","process","cwd","outputDir","exportForAppHosting","stopAsync","action","program"],"mappings":";;;;;;;;;;;;;;;;;;;;4IAWO,iBAAsBA,UAAtB;AAAA,QAA0CC,OAA1C,uEAA6D,EAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACAA,QAAQC,SADR;AAAA;AAAA;AAAA;;AAAA,kBAEG,oDAAiB,oBAAjB,EAAuC,uCAAvC,CAFH;;AAAA;AAAA,gBAIA,0CAAUC,KAAV,CAAgBF,QAAQC,SAAxB,EAAmC,EAAEE,WAAW,CAAC,OAAD,CAAb,EAAnC,CAJA;AAAA;AAAA;AAAA;;AAAA,kBAKG,oDAAiB,oBAAjB,EAAuC,yCAAvC,CALH;;AAAA;AAAA;AAAA,mBAOgB,8BAAQC,aAAR,CAAsBL,UAAtB,CAPhB;;AAAA;AAOCM,kBAPD;AASDC,yBATC,GASe,KATf;;AAAA,kBAUDD,WAAW,SAVV;AAAA;AAAA;AAAA;;AAWH,+EACgCL,QAAQO,MAAR,CAC3BC,IAFL;;AAKA,0DAAiBT,UAAjB;;AAEMU,qBAlBH,GAkBe,EAAEC,OAAOV,QAAQW,KAAjB,EAAwBC,eAAe,IAAvC,EAlBf;;AAmBH,gBAAIZ,QAAQa,UAAZ,EAAwB;AACtBJ,wBAAUI,UAAV,GAAuBb,QAAQa,UAA/B;AACD;AACD,+CAAI,uBAAJ;AAtBG;AAAA,mBAuBG,8BAAQC,UAAR,CAAmBf,UAAnB,EAA+BU,SAA/B,EAA0C,CAACT,QAAQe,KAAnD,CAvBH;;AAAA;AAwBHT,4BAAgB,IAAhB;;AAxBG;;AA2BL;AACMU,6BA5BD,GA4BqB,cAAKC,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4BnB,QAAQoB,SAApC,CA5BrB;AAAA;AAAA,mBA6BC,8BAAQC,mBAAR,CAA4BtB,UAA5B,EAAwCC,QAAQC,SAAhD,EAA2De,iBAA3D,CA7BD;;AAAA;AAAA,iBA+BDV,aA/BC;AAAA;AAAA;AAAA;;AAgCH,+CAAI,+BAAJ;AAhCG;AAAA,mBAiCG,8BAAQgB,SAAR,CAAkBvB,UAAlB,CAjCH;;AAAA;AAmCL,+GAAkEC,QAAQoB,SAA1E;;AAnCK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeG,M;;;;;;;AARtB;AAAA;AAAA;;AACA;;;;AACA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;kBAwCe,UAACC,OAAD,EAAkB;AAC/B;;;;;;;;;;;;AAYD,C","file":"../../../commands/unreleased/export.js","sourcesContent":["/**\n * @flow\n */\nimport validator from 'validator';\nimport path from 'path';\nimport { Project } from 'xdl';\n\nimport log from '../log';\nimport { installExitHooks } from '../exit';\nimport CommandError from '../CommandError';\n\nexport async function action(projectDir: string, options: Options = {}) {\n  if (!options.publicUrl) {\n    throw new CommandError('MISSING_PUBLIC_URL', 'Missing required option: --public-url');\n  }\n  if (!validator.isURL(options.publicUrl, { protocols: ['https'] })) {\n    throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n  }\n  const status = await Project.currentStatus(projectDir);\n\n  let startedOurOwn = false;\n  if (status !== 'running') {\n    log(\n      `Unable to find an existing ${options.parent\n        .name} instance for this directory, starting a new one...`\n    );\n\n    installExitHooks(projectDir);\n\n    const startOpts = { reset: options.clear, nonPersistent: true };\n    if (options.maxWorkers) {\n      startOpts.maxWorkers = options.maxWorkers;\n    }\n    log('Exporting your app...');\n    await Project.startAsync(projectDir, startOpts, !options.quiet);\n    startedOurOwn = true;\n  }\n\n  // Make outputDir an absolute path if it isnt already\n  const absoluteOutputDir = path.resolve(process.cwd(), options.outputDir);\n  await Project.exportForAppHosting(projectDir, options.publicUrl, absoluteOutputDir);\n\n  if (startedOurOwn) {\n    log('Terminating server processes.');\n    await Project.stopAsync(projectDir);\n  }\n  log(`Export was successful. Your exported files can be found in ${options.outputDir}`);\n}\n\nexport default (program: any) => {\n  /*   program\n    .command('export [project-dir]')\n    .description('Exports the static files of the app for hosting it on a web server.')\n    .option('-p, --public-url <url>', 'The public url that will host the static files. (Required)')\n    .option(\n      '--output-dir <dir>',\n      'The directory to export the static files to. Default directory is `dist`',\n      'dist'\n    )\n    .option('-q, --quiet', 'Suppress verbose output from the React Native packager.')\n    .option('--max-workers [num]', 'Maximum number of tasks to allow Metro to spawn.')\n    .asyncActionProjectDir(action, false, true); */\n};\n"],"sourceRoot":"/exp@56.0.0/src"}