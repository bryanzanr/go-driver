{"version":3,"sources":["expo_commands/start/TerminalUI.js"],"names":["CTRL_C","CTRL_D","CTRL_L","b","bold","i","italic","u","underline","clearConsole","process","stdout","write","platform","printHelp","newLine","nested","printUsage","projectDir","readAsync","dev","getAsync","openDevToolsAtStartup","getCurrentUserAsync","user","devMode","iosInfo","username","printServerInfo","constructManifestUrlAsync","url","printQRCode","wrap","columns","wrapItem","item","text","trimStart","startAsync","key","emit","openProjectAsync","success","error","msg","readPackagerInfoAsync","devToolsPort","wait","enabled","setAsync","stopWaitingForCommand","hostType","lanAddress","defaultRecipient","rl","createInterface","input","stdin","output","handleKeypress","chr","name","cleanup","cancel","close","removeListener","startWaitingForCommand","addListener","question","sendTo","trim","sent","sendAsync","projectSettings","minify","reset","logoutAsync","setRawMode","resume","setEncoding","on"],"mappings":"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","file":"../../../expo_commands/start/TerminalUI.js","sourcesContent":["// @flow\n\nimport {\n  Android,\n  Config,\n  Exp,\n  Project,\n  ProjectSettings,\n  Simulator,\n  UrlUtils,\n  User,\n  UserSettings,\n} from 'xdl';\n\nimport chalk from 'chalk';\nimport opn from 'opn';\nimport readline from 'readline';\nimport wordwrap from 'wordwrap';\n\nimport { loginOrRegisterIfLoggedOut } from '../../accounts';\nimport urlOpts from '../../urlOpts';\nimport log from '../../log';\n\nconst CTRL_C = '\\u0003';\nconst CTRL_D = '\\u0004';\nconst CTRL_L = '\\u000C';\n\nconst { bold: b, italic: i, underline: u } = chalk;\n\nconst clearConsole = () => {\n  process.stdout.write(process.platform === 'win32' ? '\\x1Bc' : '\\x1B[2J\\x1B[3J\\x1B[H');\n};\n\nconst printHelp = () => {\n  log.newLine();\n  log.nested(`Press ${b('?')} to show a list of all available commands.`);\n};\n\nconst printUsage = async projectDir => {\n  const { dev } = await ProjectSettings.readAsync(projectDir);\n  const openDevToolsAtStartup = await UserSettings.getAsync('openDevToolsAtStartup', true);\n  const user = await User.getCurrentUserAsync();\n  const devMode = dev ? 'development' : 'production';\n  const iosInfo = process.platform === 'darwin' ? `, or ${b`i`} to run on ${u`i`}OS simulator` : '';\n  log.nested(`\n \\u203A Press ${b`a`} to run on ${u`A`}ndroid device/emulator${iosInfo}.\n \\u203A Press ${b`c`} to show info on ${u`c`}onnecting new devices.\n \\u203A Press ${b`d`} to open DevTools in the default web browser.\n \\u203A Press ${b`shift-d`} to ${openDevToolsAtStartup\n    ? 'disable'\n    : 'enable'} automatically opening ${u`D`}evTools at startup.\n \\u203A Press ${b`e`} to send an app link with ${u`e`}mail/SMS.\n \\u203A Press ${b`p`} to toggle ${u`p`}roduction mode. (current mode: ${i(devMode)})\n \\u203A Press ${b`r`} to ${u`r`}estart bundler, or ${b`shift-r`} to restart and clear cache.\n \\u203A Press ${b`s`} to ${u`s`}ign ${user\n    ? `out. (Signed in as ${i('@' + user.username)}.)`\n    : 'in.'}\n`);\n};\n\nexport const printServerInfo = async projectDir => {\n  const url = await UrlUtils.constructManifestUrlAsync(projectDir);\n  const user = await User.getCurrentUserAsync();\n  log.newLine();\n  log.nested(`  ${u(url)}`);\n  log.newLine();\n  urlOpts.printQRCode(url);\n  const wrap = wordwrap(2, process.stdout.columns || 80);\n  const wrapItem = wordwrap(4, process.stdout.columns || 80);\n  const item = text => '  \\u2022 ' + wrapItem(text).trimStart();\n  const iosInfo = process.platform === 'darwin' ? `, or ${b('i')} for iOS simulator` : '';\n  log.nested(wrap(u('To run the app with live reloading, choose one of:')));\n  if (user) {\n    log.nested(\n      item(\n        `Sign in as ${i(\n          '@' + user.username\n        )} in Expo Client on Android or iOS. Your projects will automatically appear in the \"Projects\" tab.`\n      )\n    );\n  }\n  log.nested(item(`Scan the QR code above with the Expo app (Android) or the Camera app (iOS).`));\n  log.nested(item(`Press ${b`a`} for Android emulator${iosInfo}.`));\n  log.nested(item(`Press ${b`e`} to send a link to your phone with email/SMS.`));\n  if (!user) {\n    log.nested(item(`Press ${b`s`} to sign in and enable more options.`));\n  }\n  printHelp();\n};\n\nexport const startAsync = async projectDir => {\n  const { stdin } = process;\n  const startWaitingForCommand = () => {\n    stdin.setRawMode(true);\n    stdin.resume();\n    stdin.setEncoding('utf8');\n    stdin.on('data', handleKeypress);\n  };\n\n  const stopWaitingForCommand = () => {\n    stdin.removeListener('data', handleKeypress);\n    stdin.setRawMode(false);\n    stdin.resume();\n  };\n\n  startWaitingForCommand();\n\n  await printServerInfo(projectDir);\n\n  async function handleKeypress(key) {\n    switch (key) {\n      case CTRL_C:\n      case CTRL_D: {\n        process.emit('SIGINT');\n        return;\n      }\n      case CTRL_L: {\n        clearConsole();\n        return;\n      }\n      case '?': {\n        await printUsage(projectDir);\n        return;\n      }\n      case 'a': {\n        clearConsole();\n        log('Trying to open the project on Android...');\n        const { success, error } = await Android.openProjectAsync(projectDir);\n        printHelp();\n        return;\n      }\n      case 'i': {\n        clearConsole();\n        log('Trying to open the project in iOS simulator...');\n        const { success, msg } = await Simulator.openProjectAsync(projectDir);\n        printHelp();\n        return;\n      }\n      case 'c': {\n        clearConsole();\n        await printServerInfo(projectDir);\n        return;\n      }\n      case 'd': {\n        const { devToolsPort } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n        log('Opening DevTools in the browser...');\n        opn(`http://localhost:${devToolsPort}`, { wait: false });\n        printHelp();\n        return;\n      }\n      case 'D': {\n        clearConsole();\n        const enabled = !await UserSettings.getAsync('openDevToolsAtStartup', true);\n        await UserSettings.setAsync('openDevToolsAtStartup', enabled);\n        log(\n          `Automatically opening DevTools ${b(\n            enabled ? 'enabled' : 'disabled'\n          )}.\\nPress ${b`d`} to open DevTools now.`\n        );\n        printHelp();\n        return;\n      }\n      case 'e': {\n        stopWaitingForCommand();\n        const lanAddress = await UrlUtils.constructManifestUrlAsync(projectDir, {\n          hostType: 'lan',\n        });\n        const defaultRecipient = await UserSettings.getAsync('sendTo', null);\n        const rl = readline.createInterface({\n          input: process.stdin,\n          output: process.stdout,\n        });\n        const handleKeypress = (chr, key) => {\n          if (key && key.name === 'escape') {\n            cleanup();\n            cancel();\n          }\n        };\n        const cleanup = () => {\n          rl.close();\n          process.stdin.removeListener('keypress', handleKeypress);\n          startWaitingForCommand();\n        };\n        const cancel = async () => {\n          clearConsole();\n          printHelp();\n        };\n        clearConsole();\n        process.stdin.addListener('keypress', handleKeypress);\n        log('Please enter your phone number or email address (press ESC to cancel) ');\n        rl.question(defaultRecipient ? `[default: ${defaultRecipient}]> ` : '> ', async sendTo => {\n          cleanup();\n          if (!sendTo && defaultRecipient) {\n            sendTo = defaultRecipient;\n          }\n          sendTo = sendTo && sendTo.trim();\n          if (!sendTo) {\n            cancel();\n            return;\n          }\n          log(`Sending ${lanAddress} to ${sendTo}...`);\n\n          let sent = false;\n          try {\n            await Exp.sendAsync(sendTo, lanAddress);\n            log(`Sent link successfully.`);\n            sent = true;\n          } catch (err) {\n            log(`Could not send link. ${err}`);\n          }\n          printHelp();\n          if (sent) {\n            await UserSettings.setAsync('sendTo', sendTo);\n          }\n        });\n        return;\n      }\n      case 'p': {\n        clearConsole();\n        const projectSettings = await ProjectSettings.readAsync(projectDir);\n        const dev = !projectSettings.dev;\n        await ProjectSettings.setAsync(projectDir, { dev, minify: !dev });\n        log(\n          `Metro Bundler is now running in ${chalk.bold(\n            dev ? 'development' : 'production'\n          )}${chalk.reset(` mode.`)}\nPlease reload the project in the Expo app for the change to take effect.`\n        );\n        printHelp();\n        return;\n      }\n      case 'r':\n      case 'R': {\n        clearConsole();\n        const reset = key === 'R';\n        if (reset) {\n          log('Restarting Metro Bundler and clearing cache...');\n        } else {\n          log('Restarting Metro Bundler...');\n        }\n        Project.startAsync(projectDir, { reset });\n        return;\n      }\n      case 's': {\n        const user = await User.getCurrentUserAsync();\n        if (user) {\n          await User.logoutAsync();\n          log('Signed out.');\n        } else {\n          stopWaitingForCommand();\n          try {\n            await loginOrRegisterIfLoggedOut();\n          } catch (e) {\n            log.error(e);\n          } finally {\n            startWaitingForCommand();\n          }\n        }\n        printHelp();\n        return;\n      }\n    }\n  }\n};\n"],"sourceRoot":"/exp@56.0.0/src"}